# -*- coding: utf-8 -*-
"""NSE daily data load.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jlzTWmdeX7wjIIjS9lwsTzygfKryqKYF
"""

from datetime import date, timedelta
import pandas as pd
import nselib
from nselib import capital_market
from sqlalchemy import create_engine
import numpy as np
from twilio.rest import Client
import os

account_sid = os.getenv("TWILIO_ACCOUNT_SID")
auth_token = os.getenv("TWILIO_AUTH_TOKEN")
from_number = os.getenv("TWILIO_FROM_NUMBER")
to_number = os.getenv("TWILIO_TO_NUMBER")

client = Client(account_sid, auth_token)

# Creating the SQL connection to free neon.tech database
connection_string = 'postgresql://neondb_owner:npg_iGAC2k4pRYEZ@ep-wandering-king-a10gzxx7-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
engine = create_engine(connection_string)

today = date.today()
trading_date = today- timedelta(days=1)
check_table_date = today- timedelta(days=7)
date_str = trading_date.strftime('%d-%m-%Y')

new_data=capital_market.bhav_copy_with_delivery(trade_date=date_str)
new_data.columns = [col.lower() for col in new_data.columns]
new_data['date1']=pd.to_datetime(new_data['date1'],format='%d-%b-%Y')

# Convert columns to numeric, coercing errors and filling NaN with 0
for col in ['deliv_qty', 'deliv_per', 'last_price']:
  new_data[col] = pd.to_numeric(new_data[col], errors='coerce').fillna(0)

# STEP 1: Get existing composite keys from the table
query = f"SELECT date1, symbol FROM daily_nse_price WHERE date1 > '{check_table_date}'"
existing_keys = pd.read_sql(
  query,
  con=engine,
  parse_dates=['date1']
)

# STEP 2: Merge to filter out duplicates
merged = pd.merge(
  new_data,
  existing_keys,
  on=['date1', 'symbol'],
  how='left',
  indicator=True
)

# Keep only new rows
df_to_insert = merged[merged['_merge'] == 'left_only'].drop(columns=['_merge'])

# STEP 3: Insert only new rows
if not df_to_insert.empty:
  df_to_insert.to_sql('daily_nse_price', con=engine, if_exists='append', index=False)
  whatsapp_message  = f"NSE bhav copy inserted {len(df_to_insert)} new rows."
else:
  whatsapp_message = 'NSE bhav copy â€” all entries already exist.'

message = client.messages.create(
    body = whatsapp_message,
    from_=from_number,       # Twilio Sandbox Number
    to=to_number            # YOUR Verified WhatsApp Number
)

print(message.sid)



